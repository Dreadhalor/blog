"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9188],{1606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=t(3274),s=t(9128);const r={},i=void 0,a={permalink:"/the-blog/blog/fallcrate",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/fallcrate/index.md",source:"@site/blog/fallcrate/index.md",title:"fallcrate",description:"1. Set up Next.js (v14 at time of writing)",date:"2024-04-14T03:41:29.000Z",tags:[],readingTime:37.535,hasTruncateMarker:!0,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"Sidebar File Browser",permalink:"/the-blog/blog/fallcrate-sidebar-browser"}},l={authorsImageUrls:[]},d=[{value:"1. Set up Next.js (v14 at time of writing)",id:"1-set-up-nextjs-v14-at-time-of-writing",level:2},{value:"2. Design time, I guess?",id:"2-design-time-i-guess",level:2},{value:"3. Set up shadcn/ui",id:"3-set-up-shadcnui",level:2},{value:"4. Start building random stuff (this will be very large)",id:"4-start-building-random-stuff-this-will-be-very-large",level:2},{value:"The browse-action-bar",id:"the-browse-action-bar",level:3},{value:"Creating an alias:",id:"creating-an-alias",level:4},{value:"<code>clsx</code>: Allows for us to declare classnames conditionally without having to worry about making sure everything is concatenated &amp; formatted properly. We can simply say:",id:"clsx-allows-for-us-to-declare-classnames-conditionally-without-having-to-worry-about-making-sure-everything-is-concatenated--formatted-properly-we-can-simply-say",level:4},{value:"<code>twMerge</code>: Allows for us to efficiently merge Tailwind utility classes so that we can override previous classes simply by appending new ones. For example:",id:"twmerge-allows-for-us-to-efficiently-merge-tailwind-utility-classes-so-that-we-can-override-previous-classes-simply-by-appending-new-ones-for-example",level:4},{value:"Configuration detour:",id:"configuration-detour",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"1-set-up-nextjs-v14-at-time-of-writing",children:"1. Set up Next.js (v14 at time of writing)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"pnpm dlx create-next-app@latest"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"we use pnpm because I like it, but this can all be done with npm as well"}),"\n",(0,o.jsx)(n.li,{children:"app name: fallcrate-tutorial"}),"\n",(0,o.jsx)(n.li,{children:"use Typescript (because type-safety ftw)"}),"\n",(0,o.jsx)(n.li,{children:"use eslint (just because)"}),"\n",(0,o.jsx)(n.li,{children:"use TailwindCSS (because it's amazing)"}),"\n",(0,o.jsx)(n.li,{children:"use /src (because it nicely separates configs from code)"}),"\n",(0,o.jsx)(n.li,{children:"use app router (because it's cool)"}),"\n",(0,o.jsx)(n.li,{children:"use default alias (because I don't have a good reason to the contrary)"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"sanity check"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"pnpm dev"})}),"\n",(0,o.jsxs)(n.li,{children:["check ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,o.jsx)(n.li,{children:"it runs, yay!"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"replace homepage with, like, anything"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/page.tsx\nexport default function Home() {\n  return (\n    <main className='flex min-h-screen flex-col items-center justify-between p-24'>\n      If you can&apos;t tell the difference between a spoon and a ladle, then\n      you&apos;re fat\n    </main>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["side note: we use ",(0,o.jsx)(n.code,{children:"&apos;"})," for apostrophes because of sanitized inputs or something"]}),"\n",(0,o.jsx)(n.li,{children:"check that the changes are reflected - yay, they are"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"now is a bit of a personal choice: we're going to mock layouts before we actually plug in any infrastructure"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"this should make it a little less intimidating"}),"\n",(0,o.jsx)(n.li,{children:"it does come at the cost of having to configure dependencies in a slightly more complex codebase, but it shouldn't be too bad"}),"\n",(0,o.jsx)(n.li,{children:"I will also include installation of dependencies in a fresh project in a separate section for those who want to do it that way"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"create new route for layout testing"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"this is one reason why the app router is very nice, creating new routes just to test stuff is braindead simple"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["create ",(0,o.jsx)(n.code,{children:"src/app/test/page.tsx"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["you can either create a file in ",(0,o.jsx)(n.code,{children:"src/app"})," named ",(0,o.jsx)(n.code,{children:"test/page.tsx"})," or you can manually create the ",(0,o.jsx)(n.code,{children:"test"})," directory & then the ",(0,o.jsx)(n.code,{children:"page.tsx"})," file, these are equivalent but the first option is a shortcut"]}),"\n",(0,o.jsxs)(n.li,{children:["make ",(0,o.jsx)(n.code,{children:"page.tsx"})," a default export filler component:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport React from 'react';\n\nconst Page = () => {\n  return (\n    <div>\n      They say that money talks, but all mine says is &apos;Goodbye!&apos;\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["sanity check: view the route at ",(0,o.jsx)(n.code,{children:"/test"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-design-time-i-guess",children:"2. Design time, I guess?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Pull up actual Dropbox - this provides 2 advantages:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A quick template we can copy on desktop"}),"\n",(0,o.jsx)(n.li,{children:"Automatic reference for responsive design"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Pick the most obvious page division to start at - I first notice the sidebar + main content division"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Let's create that division (in the test route, just to keep it sandboxed):"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"step 1, put borders on things"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"step 2, notice that the content is not as big as you thought it was & investigate"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["the fix: make the ",(0,o.jsx)(n.code,{children:"body"})," tag h-screen (needs to be h-screen instead of min-h-screen so that h-full works in its children, it's a quirk of CSS height)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/layout.tsx\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang='en'>\n      <body className={`${inter.className} h-screen`}>{children}</body>\n    </html>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"we're using string interpolation for now, which I despise, but we'll fix that later when we install a dependency (shadcn-ui)"}),"\n",(0,o.jsx)(n.li,{children:"now any child can have h-full & it'll adapt to the screen height"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport React from 'react';\n\nconst Page = () => {\n  return (\n    <div className='h-full border'>\n      They say that money talks, but all mine says is &apos;Goodbye!&apos;\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"& now the content size looks as it should"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"step 3, actually create the containers"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Still using Dropbox as a reference"}),"\n",(0,o.jsx)(n.li,{children:"Make sure to 'inspect element' to check sizes & colors when necessary"}),"\n",(0,o.jsxs)(n.li,{children:["Sidebar appears to be 240px - use the ",(0,o.jsx)(n.code,{children:"w-[240px]"})," class"]}),"\n",(0,o.jsxs)(n.li,{children:["Main content fills remaining width - use the ",(0,o.jsx)(n.code,{children:"flex-1"})," class"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Now, time to make ui components - shadcn/ui to the rescue"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"3-set-up-shadcnui",children:"3. Set up shadcn/ui"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"what is shadcn/ui? It is a set of component primitives built on Radix-ui, TailwindCSS & class-variance-authority designed to make crafting custom components way, way faster whilst also being accessibility-friendly"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"VERY IMPORTANT POINT: do NOT treat the primitives it provides as gospel, they are meant to be easily modified"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"We will, in fact, be changing them & in some cases going under-the-hood to leverage Radix-ui when shadcn/ui makes architectural choices I don't personally agree with. But I will ensure you very deeply understand my rationale when this happens."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["go to ",(0,o.jsx)(n.a,{href:"https://ui.shadcn.com/",children:"https://ui.shadcn.com/"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"navigate to /docs/installation/next & check the tutorial:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"We skip this, we already have a Next.js project set up"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Run the cli, but for pnpm (sorry, I like pnpm): ",(0,o.jsx)(n.code,{children:"pnpm dlx shadcn-ui@latest init"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Answer the prompts to configure ",(0,o.jsx)(n.code,{children:"components.json"}),", which is basically shadcn/ui's configuration file used when adding a new component - there are reasons to touch this, but for this project we will not need to"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Which style would you like to use? \u203a New York"})," (literally just because I like it slightly more than default)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Which color would you like to use as base color? \u203a Slate"})," (because I don't care about colors)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Do you want to use CSS variables for colors? \u203a yes"})," (because CSS variables are cool, even though we won't really do anything cool with them)"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Optionally, use shadcn/ui's configuration for font in ",(0,o.jsx)(n.code,{children:"/src/app/layout.tsx"})," - not really a big deal, but it seems like a good way to set it up & it shows you how we can replace the string interpolation with the new ",(0,o.jsx)(n.code,{children:"cn"})," utility we can now use."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"here we incorporate shadcn/ui's code with our own:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/layout.tsx\nimport type { Metadata } from 'next';\nimport { Inter as FontSans } from 'next/font/google';\nimport { cn } from '@/lib/utils';\nimport '@/app/globals.css';\n\nconst fontSans = FontSans({\n  subsets: ['latin'],\n  variable: '--font-sans',\n});\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang='en'>\n      <body\n        className={cn(\n          'bg-background h-screen font-sans antialiased',\n          fontSans.variable,\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"also we make sure to incorporate the font-family into our tailwind.config.ts:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// tailwind.config.ts\nimport type { Config } from 'tailwindcss';\nimport { fontFamily } from 'tailwindcss/defaultTheme';\n\nconst config = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: '',\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-sans)', ...fontFamily.sans],\n      },\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n\nexport default config;\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Sanity check, look back at ",(0,o.jsx)(n.a,{href:"http://localhost:3000/test",children:"http://localhost:3000/test"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["it is still structured correctly but the colors aren't right any more, but that's fine because we simply are using light mode by default. To switch to dark mode, we add the ",(0,o.jsx)(n.code,{children:"dark"})," class to the ",(0,o.jsx)(n.code,{children:"html"})," tag."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"From here on out, we'll be modifying dark mode CSS variables (when we need to) since we're using dark mode"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsxs)(n.li,{children:["Ignore this, it's more of a recommendation & we're largely following it already. globals.css isn't in the ",(0,o.jsx)(n.code,{children:"styles"})," directory, but I don't care"]}),"\n",(0,o.jsx)(n.li,{children:"We're done! We can now add components. Time to start building."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"4-start-building-random-stuff-this-will-be-very-large",children:"4. Start building random stuff (this will be very large)"}),"\n",(0,o.jsx)(n.h3,{id:"the-browse-action-bar",children:"The browse-action-bar"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{alt:"Browse Action Bar",src:t(3231).A+"",width:"964",height:"110"}),"\nWhy are we calling it that? Because Dropbox called it that. Why did Dropbox call it that? I don't know, I don't work at Dropbox. If they're hiring I wouldn't say no, though."]}),"\n",(0,o.jsx)(n.p,{children:"First, however, we have to think about some of the design choices made here. For instance, the 'Create' button. It's the primary call-to-action button of the menu, but if we click on it, we see that it doesn't do anything that is both relevant to file uploads & non-redundant to the 'Upload' button right next to it. The features it advocates for are outside of the scope of this project & as such, we will remove it."}),"\n",(0,o.jsx)(n.p,{children:"Since the primary feature of this app is document uploads rather than document creation, we will actually make the primary call-to-action button the 'Upload' button instead."}),"\n",(0,o.jsx)(n.p,{children:"Shadcn/ui has some tools to make creating these buttons easier, but we will still need to customize it. We'll start by adding the Button primitive from the command line in the root of the project:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"pnpm dlx shadcn-ui@latest add button"})}),"\n",(0,o.jsxs)(n.p,{children:["Cool, now we have a Button primitive we can extend + customize in ",(0,o.jsx)(n.code,{children:"src/components/ui/button.tsx"}),". However, as we make more components on top of shadcn/ui primitives, we will throw them outside of the ",(0,o.jsx)(n.code,{children:"ui"})," folder in the ",(0,o.jsx)(n.code,{children:"src/components"})," folder to distinguish between component primitives & components. So, we'll start with the browse-action-bar buttons."]}),"\n",(0,o.jsxs)(n.p,{children:["Here it's important to note that we are using a shortcut from the react snippets VSCode extension. Specifically, ",(0,o.jsx)(n.code,{children:"rafc"})," to create a React component that is exported as a named export. I've seen most projects that use default exports for components, & I just don't like that for no particular reason so I don't do it. I make an exception for app router pages, but that's because Next.js kinda forces me to because it displays the page as whatever the default export from ",(0,o.jsx)(n.code,{children:"page.tsx"})," is."]}),"\n",(0,o.jsx)(n.p,{children:"Anyway, here's our starter button:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/browse-action-bar-button.tsx\nimport React from 'react';\n\nexport const BrowseActionBarButton = () => {\n  return <div>BrowseActionBarButton</div>;\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"I know, it's almost scary how advanced this code is."}),"\n",(0,o.jsxs)(n.p,{children:["Side note: You may be familiar with most React projects + tutorials that use PascalCase for component filenames. I do NOT use PascalCase for component filenames. I use kebab-case. This is literally just because MacOS is dumb & the filesystem in git is case-insensitive for filenames which means if I change ",(0,o.jsx)(n.code,{children:"App.tsx"})," to ",(0,o.jsx)(n.code,{children:"app.tsx"}),", git does not think anything has changed & the Github repo end up not matching with my local filesystem any time I change the case of a filename. It's a big headache so to get around this, I've just decided capital letters are banned from filenames in my projects now. Of course, with some obvious exceptions for things that are expected to be a particular case like ",(0,o.jsx)(n.code,{children:"README.md"})," or ",(0,o.jsx)(n.code,{children:"Dockerfile"}),". But if it's at all a stylistic choice, then I use exclusively kebab-case for filenames."]}),"\n",(0,o.jsx)(n.p,{children:"Anyway, let's make a button!"}),"\n",(0,o.jsx)(n.p,{children:"We'll start with the default Button primitive. & remember, we're temporarily using borders around stuff just because I like seeing them when I'm in the middle of development. We remove the borders when we feel confident we don't need them anymore."}),"\n",(0,o.jsx)(n.p,{children:"Alright, here's a quick sanity check for putting a button in there."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport React from 'react';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex border border-blue-500'>\n          <BrowseActionBarButton>Hey yo</BrowseActionBarButton>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/browse-action-bar-button.tsx\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\n\ntype Props = {\n  children: React.ReactNode;\n};\nexport const BrowseActionBarButton = ({ children }: Props) => {\n  return <Button>{children}</Button>;\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"Great, now we have a completely ill-matching button on the page. But it's OUR completely ill-matching button on the page."}),"\n",(0,o.jsxs)(n.p,{children:["Side note: We're gonna end up having to import stuff from ",(0,o.jsx)(n.code,{children:"@/components/ui"})," a LOT, so to add just a bit more convenience let's create an alias for ",(0,o.jsx)(n.code,{children:"@/components/ui"}),". As you can see, we're already using an alias for ",(0,o.jsx)(n.code,{children:"src"})," because ",(0,o.jsx)(n.code,{children:"@"})," is not actually a file path. So if we look where ",(0,o.jsx)(n.code,{children:"@"})," is defined as the alias for the ",(0,o.jsx)(n.code,{children:"src"})," directory, we can just add another alias for the ",(0,o.jsx)(n.code,{children:"src/components/ui"})," (aka ",(0,o.jsx)(n.code,{children:"@/components/ui"}),") directory."]}),"\n",(0,o.jsx)(n.h4,{id:"creating-an-alias",children:"Creating an alias:"}),"\n",(0,o.jsxs)(n.p,{children:["We can see the alias for ",(0,o.jsx)(n.code,{children:"src"})," configured in the ",(0,o.jsx)(n.code,{children:"tsconfig.json"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'{\n  "compilerOptions": {\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "allowJs": true,\n    "skipLibCheck": true,\n    "strict": true,\n    "noEmit": true,\n    "esModuleInterop": true,\n    "module": "esnext",\n    "moduleResolution": "bundler",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "jsx": "preserve",\n    "incremental": true,\n    "plugins": [\n      {\n        "name": "next"\n      }\n    ],\n    "paths": {\n      "@/*": ["./src/*"]\n    }\n  },\n  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],\n  "exclude": ["node_modules"]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["So we can see right there in the ",(0,o.jsx)(n.code,{children:"paths"})," field of the ",(0,o.jsx)(n.code,{children:"compilerOptions"})," object that ",(0,o.jsx)(n.code,{children:"@/*"})," is defined as the alias for ",(0,o.jsx)(n.code,{children:"./src/*"}),". Here, the wildcard (",(0,o.jsx)(n.code,{children:"*"}),") just means 'we don't care what comes after this, just replace any path that starts with ",(0,o.jsx)(n.code,{children:"@/"})," with ",(0,o.jsx)(n.code,{children:"./src/"})," when compilation is happening.' It's something that affects literally no one but the coder, & I love it because I am the coder & it therefore affects me. Now, let's add another alias, but this time for the ",(0,o.jsx)(n.code,{children:"./src/components/ui/"})," directory because I don't want to keep typing that every time I reference a ui primitive. Let's just stick with the same theme completely arbitrarily & call it ",(0,o.jsx)(n.code,{children:"@ui"}),". So change the ",(0,o.jsx)(n.code,{children:"paths"})," object to:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'"paths": {\n  "@/*": ["./src/*"],\n  "@ui/*": ["./src/components/ui/*"]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Side note: you may also notice that instead of a ",(0,o.jsx)(n.code,{children:"string"}),"-",(0,o.jsx)(n.code,{children:"string"})," mapping, the ",(0,o.jsx)(n.code,{children:"paths"})," object is technically a ",(0,o.jsx)(n.code,{children:"string"}),"-",(0,o.jsx)(n.code,{children:"string[]"})," mapping. I have never had to care about why this is, & for this project neither will you. Just put the alias in an array of length 1 because that's the convention."]}),"\n",(0,o.jsxs)(n.p,{children:["But now that the alias is configured, we can use it in our ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"})," component!"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { Button } from '@ui/button';\n\ntype Props = {\n  children: React.ReactNode;\n};\nexport const BrowseActionBarButton = ({ children }: Props) => {\n  return <Button>{children}</Button>;\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"Yay, absolutely nothing has changed on the client side but we will get to use marginally shorter path names when referencing ui primitives!"}),"\n",(0,o.jsxs)(n.p,{children:["Okay, configuration detour over. Now let's actually make this button look like it belongs here. To do this, we'll be overriding some of the button primitives defined in ",(0,o.jsx)(n.code,{children:"buttonVariants"}),". This is a very neat feature of cva (class-variance-authority) because not only does it allow us to define button styles as simple variants, but it allows us to have compound variants & we can use the classNames separately to pass into other components such as React's ",(0,o.jsx)(n.code,{children:"Link"})," component to have ",(0,o.jsx)(n.code,{children:"Link"}),"s that look exactly like buttons. & because we're using the ",(0,o.jsx)(n.code,{children:"cn"})," utility, we are able to override any styles we want in order to stick buttons with slightly modified styles anywhere we need to. Neat!"]}),"\n",(0,o.jsxs)(n.p,{children:["Since we're on the topic, we may as well go over the ",(0,o.jsx)(n.code,{children:"cn"})," utility added by shadcn/ui because it's really quite awesome:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// src/lib/utils.ts\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["So we can see that under-the-hood, calling ",(0,o.jsx)(n.code,{children:"cn"})," is just a way of calling ",(0,o.jsx)(n.code,{children:"clsx"})," & then ",(0,o.jsx)(n.code,{children:"twMerge"})," on any classname or array of classnames."]}),"\n",(0,o.jsx)(n.p,{children:"Here's why that's awesome:"}),"\n",(0,o.jsxs)(n.h4,{id:"clsx-allows-for-us-to-declare-classnames-conditionally-without-having-to-worry-about-making-sure-everything-is-concatenated--formatted-properly-we-can-simply-say",children:[(0,o.jsx)(n.code,{children:"clsx"}),": Allows for us to declare classnames conditionally without having to worry about making sure everything is concatenated & formatted properly. We can simply say:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { clsx } from 'clsx';\n\nconst primary = false;\nclsx(\n  'h-12 w-12',\n  primary && 'bg-blue-500',\n  !primary && 'bg-transparent border',\n);\n//=> 'h-12 w-12 bg-transparent border'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As such, ",(0,o.jsx)(n.code,{children:"clsx"})," makes it extremely easy to manage conditional styles for things like variants."]}),"\n",(0,o.jsxs)(n.h4,{id:"twmerge-allows-for-us-to-efficiently-merge-tailwind-utility-classes-so-that-we-can-override-previous-classes-simply-by-appending-new-ones-for-example",children:[(0,o.jsx)(n.code,{children:"twMerge"}),": Allows for us to efficiently merge Tailwind utility classes so that we can override previous classes simply by appending new ones. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { twMerge } from 'tailwind-merge';\n\ntwMerge('px-2 py-1 bg-red hover:bg-dark-red', 'p-3 bg-[#B91C1C]');\n//=> 'hover:bg-dark-red p-3 bg-[#B91C1C]'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["& while here it's used somewhat trivially, it's extraordinarily useful when applied to component primitives. As long as we style primitives strictly with Tailwind classes, then we can override any conflicting primitive styles simply by passing in new classnames to whatever HOC we're building on top of the primitives & appending them to the primitive's classnames. Instead of having to deal with CSS class specifity & order of declaration, we simply at the level of Javascript can let ",(0,o.jsx)(n.code,{children:"twMerge"}),' say "hey, if you want to use ',(0,o.jsx)(n.code,{children:"p-3"})," after already declaring ",(0,o.jsx)(n.code,{children:"px-2 py-1"}),", then we'll just drop ",(0,o.jsx)(n.code,{children:"px-2 py-1"})," & keep ",(0,o.jsx)(n.code,{children:"p-3"}),"\". It's dope, yo."]}),"\n",(0,o.jsxs)(n.p,{children:["& then we combine their powers into the ",(0,o.jsx)(n.code,{children:"cn"}),' utility whenever we need to extend or conditionally apply Tailwind styles, because it is functionally literally just an alias to say "use ',(0,o.jsx)(n.code,{children:"clsx"})," & then ",(0,o.jsx)(n.code,{children:"twMerge"}),' on this list of classnames".']}),"\n",(0,o.jsxs)(n.p,{children:["Now, since we now understand why the ",(0,o.jsx)(n.code,{children:"cn"})," util is so awesome, let's look back at ",(0,o.jsx)(n.code,{children:"cva"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Here we can see the buttonVariants in the button primitive at ",(0,o.jsx)(n.code,{children:"src/components/ui/button.tsx"}),", constructed using ",(0,o.jsx)(n.code,{children:"cva"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/ui/button.tsx\n\n// ...\nconst buttonVariants = cva(\n  'focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground hover:bg-primary/90 shadow',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm',\n        outline:\n          'border-input bg-background hover:bg-accent hover:text-accent-foreground border shadow-sm',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\n// ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["One big drawback to ",(0,o.jsx)(n.code,{children:"cva"})," is that it doesn't use any utility to intelligently merge classnames, but we can achieve that on our own by just wrapping it in ",(0,o.jsx)(n.code,{children:"cn"})," ourselves when necessary to override styles it declares that conflict with Buttons we build on top of these primitive classnames. & even at that rate, ",(0,o.jsx)(n.code,{children:"cva"})," has a beta now that allows us to natively use the ",(0,o.jsx)(n.code,{children:"cn"})," utility when we call it, but we don't need to use that for this project."]}),"\n",(0,o.jsxs)(n.p,{children:["Okay - now, since this is a somewhat specific button & we're not expecting a bunch of buttons throughout the app to all be ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"}),"s, we'll just use the ",(0,o.jsx)(n.code,{children:"cn"})," utility to override these styles when necessary, using Dropbox's primary call-to-action button as a reference. We're more just viewing these primitive styles now to understand what styles we're overriding."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/browse-action-bar-button.tsx\nimport React from 'react';\nimport { Button } from '@ui/button';\n\ntype Props = {\n  children: React.ReactNode;\n};\nexport const BrowseActionBarButton = ({ children }: Props) => {\n  return (\n    <Button className='h-[76px] w-[140px] items-center justify-start rounded-none bg-blue-500 p-[12px] hover:bg-blue-600'>\n      {children}\n    </Button>\n  );\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It's worth noting here that because we didn't specify a ",(0,o.jsx)(n.code,{children:"variant"})," prop for the ",(0,o.jsx)(n.code,{children:"Button"}),", ",(0,o.jsx)(n.code,{children:"cva"})," will automatically apply the styles from ",(0,o.jsx)(n.code,{children:"variants.variant.default"})," & ",(0,o.jsx)(n.code,{children:"variants.size.default"})," (as well as the base styles from the first argument in the ",(0,o.jsx)(n.code,{children:"cva"})," function), as defined in ",(0,o.jsx)(n.code,{children:"defaultVariants"}),". These, specifically, are the styles we will have to override with the ",(0,o.jsx)(n.code,{children:"cn"})," util (when they conflict with how we want our ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"}),"s to look)."]}),"\n",(0,o.jsx)(n.p,{children:"What is effectively happening under-the-hood in this Button component is this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<button\n  className={cn(\n    // base styles from buttonVariants\n    'focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50'\n      // buttonVariants.variants.variant.default styles\n      .concat(\n        ' ',\n        'bg-primary text-primary-foreground hover:bg-primary/90 shadow',\n      )\n      // buttonVariants.variants.size.default styles\n      .concat(' ', 'h-9 px-4 py-2'),\n    // finally, the actual className prop we passed to the Button component\n    'h-[76px] w-[140px] items-center justify-start rounded-none bg-blue-500 p-[12px] hover:bg-blue-600',\n  )}\n>\n  {children}\n</button>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, ",(0,o.jsx)(n.code,{children:"cva"})," basically just appends all relevant styles to each other & creates one long string (which may have conflicting classnames, but that's another discussion. ",(0,o.jsx)(n.code,{children:"cva"})," has a beta out now that allows us to get around this, but we're not using it here). Then, the ",(0,o.jsx)(n.code,{children:"cn"})," utility appends the classes we passed into ",(0,o.jsx)(n.code,{children:"className"}),' & then uses\nAlright, it\'s looking pretty good! But we want to have an icon above the text, as well. & we should remember that we\'re dropping the "Create" button & instead making our primary call-to-action the "Upload" button, so we\'re looking for an upload icon.']}),"\n",(0,o.jsx)(n.p,{children:"To do this, we'll add my favorite icon package, react-icons."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"pnpm add react-icons"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we just have to find the upload icon we want at ",(0,o.jsx)(n.code,{children:"https://react-icons.github.io/react-icons/"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["& frankly, it's not worth it to spend very long finding the ",(0,o.jsx)(n.em,{children:"perfect"})," icon because that's a rabbit hole you'll waste a whole day on every time a design decision needs to be made. Just get something close enough, & worry about making it ",(0,o.jsx)(n.em,{children:"perfect"})," later. When is it 'later'? That's the neat part, it never is!"]}),"\n",(0,o.jsxs)(n.p,{children:["I'll choose the ",(0,o.jsx)(n.code,{children:"MdUpload"})," icon, somewhat arbitrarily."]}),"\n",(0,o.jsx)(n.p,{children:"Alright, here's the implementation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/browse-action-bar-button.tsx\nimport React from 'react';\nimport { Button } from '@ui/button';\n\ntype Props = {\n  children: React.ReactNode;\n};\nexport const BrowseActionBarButton = ({ children }: Props) => {\n  return (\n    <Button className='flex h-[76px] w-[140px] flex-col items-start justify-center gap-3 rounded-none bg-blue-500 p-[12px] font-semibold hover:bg-blue-600'>\n      {children}\n    </Button>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"& here's where we're using it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex border border-blue-500 p-2'>\n          <BrowseActionBarButton>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To accomodate the icon on top + text on bottom, we switched the button layout to ",(0,o.jsx)(n.code,{children:"flex-col"}),", but other than that we didn't change a whole lot."]}),"\n",(0,o.jsx)(n.h4,{id:"configuration-detour",children:"Configuration detour:"}),"\n",(0,o.jsxs)(n.p,{children:["You may have a hunch that as Tailwind classNames get long, they get kinda unweildy. First off, how dare you. Secondly, you're absolutely right. That's why I never use Tailwind without class sorting. Now seems about as good a time as any to add that to our project so that we can have our tailwind classes nicely sorted instead of just strewn about haphazardly in the ",(0,o.jsx)(n.code,{children:"className"}),". & for even longer cases, it helps to use the ",(0,o.jsx)(n.code,{children:"cn"})," utility to break up long classNames into separate strings, which I often do to logically separate regular classes from ",(0,o.jsx)(n.code,{children:"hover:"})," pseudoclasses & the like."]}),"\n",(0,o.jsx)(n.p,{children:"Now, let's add the config! Since this is a plugin for Prettier, we'll need to have Prettier installed as well. In case you don't already have that - firstly, shame on you. Secondly, boy are you in for a great surprise. Prettier is basically a requirement in all code that I touch because it makes everything properly formatted & standardized with basically zero effort on your part. & because it's so ubiquitous in the realm of coding, that also means you can look at roughly any Javascript codebase that is formatted by Prettier & have a general idea of the 'lay of the land' in a file, even if you may not exactly understand what the code does specifically. It's like being able to read any English book, even if the contents may not be something necessarily understand."}),"\n",(0,o.jsxs)(n.p,{children:["Anyway, let's install the dependencies. The instructions I've been using for years have come from ",(0,o.jsx)(n.a,{href:"https://tailwindcss.com/blog/automatic-class-sorting-with-prettier",children:"https://tailwindcss.com/blog/automatic-class-sorting-with-prettier"}),", but I use pnpm instead of npm:\n",(0,o.jsx)(n.code,{children:"pnpm add -D prettier prettier-plugin-tailwindcss"})]}),"\n",(0,o.jsx)(n.p,{children:"& make sure that Prettier is set to format on save. If it's not... I'll write the documentation on that 'later'."}),"\n",(0,o.jsxs)(n.p,{children:["Now, save ",(0,o.jsx)(n.code,{children:"src/app/test/page.tsx"}),". Notice that the class sorting did not happen. Sike, that's because we need a ",(0,o.jsx)(n.code,{children:".prettierrc"})," file. Wow, you should have seen the look on your face."]}),"\n",(0,o.jsxs)(n.p,{children:["We can get the ",(0,o.jsx)(n.code,{children:".prettierrc"})," file we need from the blog post's instructions & place it at the root of our project so we can tell Prettier to actually use the class sorting plugin:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// .prettierrc\n{\n  "plugins": ["prettier-plugin-tailwindcss"]\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now, save the file. & voil\xe1, sorted Tailwind classes!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex border border-blue-500 p-2'>\n          <BrowseActionBarButton>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It's not necessarily a huge deal, but it gets annoying after a while without being able to just say 'okay, I know my Tailwind classes are correct because they're being sorted properly instead of just being thrown at the front of the className string'. It's cleaner code, & it's a quick way to see if you've made a typo in a classname because if you make a typo, such as accidentally writing ",(0,o.jsx)(n.code,{children:"p-x-0"})," instead of ",(0,o.jsx)(n.code,{children:"px-0"})," then it'll throw the misspelled classname at the start of the string. As an example, with no typos you might see:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<div className='flex border border-blue-500 px-2'>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["But if you make a typo & accidentally write ",(0,o.jsx)(n.code,{children:"p-x-2"})," instead of ",(0,o.jsx)(n.code,{children:"px-2"})," you'll see this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<div className='p-x-2 flex border border-blue-500'>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["& you'll think \"hey, that's not where padding classes are supposed to go.\" & then when you try to get Intellisense to tell you what styles ",(0,o.jsx)(n.code,{children:"p-x-2"})," applies, Intellisense will be like \"that doesn't mean anything, bro\" & then you'll realize you made a typo & you'll fix it to ",(0,o.jsx)(n.code,{children:"px-2"})," immediately instead of having it crop up as a problem down the line later. Decently convenient stuff."]}),"\n",(0,o.jsx)(n.p,{children:"Okay, config detour over!"}),"\n",(0,o.jsxs)(n.p,{children:["Now that we have a pretty good primary call-to-action button, let's add just a little more styling to account for the fact that most of the buttons here are NOT primary buttons. So we'll just use the ",(0,o.jsx)(n.code,{children:"cn"})," utility for that, & add a boolean prop for ",(0,o.jsx)(n.code,{children:"primary"})," to the button to clarify which styles to use, which is also a great way to demonstrate how useful that ",(0,o.jsx)(n.code,{children:"cn"})," utility is."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/browse-action-bar-button.tsx\nimport React from 'react';\nimport { Button } from '@ui/button';\nimport { cn } from '@/lib/utils';\n\ntype Props = {\n  primary?: boolean;\n  children: React.ReactNode;\n};\nexport const BrowseActionBarButton = ({ primary = false, children }: Props) => {\n  return (\n    <Button\n      className={cn(\n        'flex h-[76px] w-[140px] flex-col items-start justify-center gap-3 rounded-none p-[12px] font-semibold',\n        primary && 'bg-blue-500 hover:bg-blue-600',\n        !primary && 'border bg-transparent text-white hover:bg-gray-900',\n      )}\n    >\n      {children}\n    </Button>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"& here's where we're using the button to make our primary 'Upload' button & a secondary 'Create folder' button (using the FiFolderPlus icon):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex gap-[20px] border border-blue-500 p-2'>\n          <BrowseActionBarButton primary>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n          <BrowseActionBarButton>\n            <>\n              <FiFolderPlus size={24} />\n              Create folder\n            </>\n          </BrowseActionBarButton>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(n.p,{children:"& it more or less looks just like Dropbox!"}),"\n",(0,o.jsxs)(n.p,{children:["Sidenote: Now, the astute of you may be thinking, \"wait, aren't the ",(0,o.jsx)(n.code,{children:"buttonVariants"})," primitive styles you're overriding from CVA? & the way you're using ",(0,o.jsx)(n.code,{children:"cn"})," to toggle the ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"})," ",(0,o.jsx)(n.code,{children:"primary"})," styles looks a lot like how CVA managed ",(0,o.jsx)(n.code,{children:"buttonVariants"})," in the first place. So, then, didn't you kinda just define these new button variants by making a tiny DIY version of CVA on top of CVA?\" & to those people I say:"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"...shhhhhhhhhhhh. This is easier."})," We won't use these variants anywhere else, so it's not worth the effort to add them to the ",(0,o.jsx)(n.code,{children:"buttonVariants"})," primitive. But VERY good catch, & how dare you."]}),"\n",(0,o.jsx)(n.p,{children:"Anyway! Just for personal preference I think I'll edit the CSS variable for border color so that the border stands out more against our background, though. To make the code a little more concise, I'll just use the relevant field instead of the whole file:"}),"\n",(0,o.jsx)(n.p,{children:"change:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"/* src/app/globals.css */\n\n/* ... */\n@layer base {\n  /* ... */\n  .dark {\n    /* ... */\n    --border: 217.2 32.6% 17.5%;\n    /* ... */\n  }\n  /* ... */\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"/* src/app/globals.css */\n\n/* ... */\n@layer base {\n  /* ... */\n  .dark {\n    /* ... */\n    --border: 217.2 10% 30%;\n    /* ... */\n  }\n  /* ... */\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:'Side note: shadcn/ui uses HSL (hue, saturation, lightness) color values for its colors, which I actually enjoy quite a lot because it reflects far more how my brain works. In my head I saw the border color & thought "I want it to be brighter & more gray", which translated very easily to "decrease the saturation, & make it lighter". Hence, 217.2 (hue) 32.6% (saturation) 17.5% (lightness) turns easily into 217.2 10% 30% without me having to do any math or really critical thinking at all.'}),"\n",(0,o.jsxs)(n.p,{children:["Okay, & with that the browse-action-bar buttons are styled! However, we're not fully done with them. You may notice that in Dropbox, the 'Upload' button actually has a dropdown menu when clicked:\n",(0,o.jsx)(n.img,{alt:"Upload dropdown",src:t(5805).A+"",width:"787",height:"198"})]}),"\n",(0,o.jsx)(n.p,{children:"So, to finish up the 'Upload' button, let's add that dropdown menu in. Fortunately, shadcn/ui has a convenient set of primitives for a dropdown menu."}),"\n",(0,o.jsxs)(n.p,{children:["Let's once again run the shadcn/ui command to install a new component from the root of our project:\n",(0,o.jsx)(n.code,{children:"pnpm dlx shadcn-ui@latest add dropdown-menu"})]}),"\n",(0,o.jsxs)(n.p,{children:["& because we are coders that means we don't want to read any more documentation than we have to, so we'll just look at the simplest example at ",(0,o.jsx)(n.a,{href:"https://ui.shadcn.com/docs/components/dropdown-menu",children:"https://ui.shadcn.com/docs/components/dropdown-menu"}),", copy+paste that code, & then modify it to suit our needs. So we start with the copy+pasted code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["& since we know we want the 'Upload' dropdown menu to have the options 'File' & 'Folder', let's just change the text in the first 2 ",(0,o.jsx)(n.code,{children:"DropdownMenuItem"}),"s & erase everything else inside of the ",(0,o.jsx)(n.code,{children:"DropdownMenuContent"})," primitive."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\n<DropdownMenu>\n  <DropdownMenuTrigger>Upload</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuItem>File</DropdownMenuItem>\n    <DropdownMenuItem>Folder</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Alright, that should be a decent starting point. Now, let's throw that code into our BrowseActionBar, but as a new button just for testing purposes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ui/dropdown-menu';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex gap-[20px] border border-blue-500 p-2'>\n          <BrowseActionBarButton primary>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n          <BrowseActionBarButton>\n            <>\n              <FiFolderPlus size={24} />\n              Create folder\n            </>\n          </BrowseActionBarButton>\n          <DropdownMenu>\n            <DropdownMenuTrigger>Upload</DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem>File</DropdownMenuItem>\n              <DropdownMenuItem>Folder</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Cool, it works! It looks funny, but it passes the sanity check."}),"\n",(0,o.jsxs)(n.p,{children:["Now, we'll need to figure out a way to make our primary ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"})," into the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"}),". & while I already know the right way to do this, just for learning purposes we'll try doing it the wrong way to demonstrate how you, as a proud, lazy coder, would figure this out on your own in the real world."]}),"\n",(0,o.jsxs)(n.p,{children:["Now, we'll first try to most obvious route. We can see that the 'Upload' text we put in the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"})," seems to have been placed inside of the button to trigger the dropdown, so why not just throw our own button in there?"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ui/dropdown-menu';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex gap-[20px] border border-blue-500 p-2'>\n          <BrowseActionBarButton primary>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n          <BrowseActionBarButton>\n            <>\n              <FiFolderPlus size={24} />\n              Create folder\n            </>\n          </BrowseActionBarButton>\n          <DropdownMenu>\n            <DropdownMenuTrigger>\n              <BrowseActionBarButton primary>\n                <>\n                  <MdUpload size={24} />\n                  Upload\n                </>\n              </BrowseActionBarButton>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem>File</DropdownMenuItem>\n              <DropdownMenuItem>Folder</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(n.p,{children:"& this initial effort seems on the surface work. However, notice that there are 4 issues:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"On page load, the 'Upload' dropdown button has a weird spacing away from the 'Create folder' button that eventually gets corrected, but it shouldn't be happening at all."}),"\n",(0,o.jsxs)(n.li,{children:["We get a console error - ",(0,o.jsx)(n.code,{children:"Warning: In HTML, <button> cannot be a descendant of <button>. This will cause a hydration error."})]}),"\n",(0,o.jsx)(n.li,{children:"The dropdown menu is aligned to the center of the trigger, rather than the start. This is sorta a personal preference to be fair, but I don't like it centered. I'll admit, it's subtle, but it still bothers me."}),"\n",(0,o.jsx)(n.li,{children:"When opening & closing the dropdown menu without clicking on anything else first, the trigger is autofocused after closing. It looks weird."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"These first 2 things are related, & we can solve issue 1 by solving issue 2. So let's focus on that first."}),"\n",(0,o.jsxs)(n.p,{children:["Why is it saying that a ",(0,o.jsx)(n.code,{children:"<button>"})," cannot be a descendant of a ",(0,o.jsx)(n.code,{children:"<button>"})," all of a sudden? The only thing that changed was that we put a button inside of the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"}),", so that gives us a strong hint of where to investigate."]}),"\n",(0,o.jsx)(n.p,{children:"& sure enough, when inspecting the DOM at the dropdown button, we see that there is, indeed, now a button within a button."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Button within button",src:t(2709).A+"",width:"361",height:"317"})}),"\n",(0,o.jsxs)(n.p,{children:["Ah, it looks like the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"})," component is, under the hood, just a HOC button like our ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"})," which wraps whatever child it's given inside of itself. That's why it works just fine when we give it the text 'Upload', even though clearly just the string 'Upload' is not a button. So we've effectively created a HOC button in the ",(0,o.jsx)(n.code,{children:"BrowseActionBarButton"})," component, & then wrapped that in another HOC button in the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"}),". It's button-ception. Arent higher-order components fun?!"]}),"\n",(0,o.jsxs)(n.p,{children:["So, we have a pretty good idea of what the problem is now. We need to find a way to tell the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"})," \"hey, I'm already giving you a button, so please don't wrap it in another button - just attach the functionality you would have put on your wrapper button to my wrapper button instead.\""]}),"\n",(0,o.jsxs)(n.p,{children:["& since we're coders, we're lazy, so we first look to see if shadcn/ui has an example for passing a button to the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"})," in the dropdown-menu documentation."]}),"\n",(0,o.jsxs)(n.p,{children:["...which it does not. But, even though shadcn/ui doesn't seem to have an example for this, we know that it's built on top of Radix-ui's dropdown-menu primitives. So, we'll look under-the-hood at Radix-ui as our next move. So, we pull up the API reference of the dropdown-menu for Radix-ui (",(0,o.jsx)(n.a,{href:"https://www.radix-ui.com/primitives/docs/components/dropdown-menu#api-reference",children:"https://www.radix-ui.com/primitives/docs/components/dropdown-menu#api-reference"}),") & look for an example there."]}),"\n",(0,o.jsxs)(n.p,{children:["...& we don't see one, annoyingly. BUT, even though there isn't a verbatim example we can copy+paste, we DO see that the ",(0,o.jsx)(n.code,{children:"Trigger"})," primitive has a boolean ",(0,o.jsx)(n.code,{children:"asChild"})," prop that we can use to tell the ",(0,o.jsx)(n.code,{children:"Trigger"})," to not wrap the child we pass to it. & if we look at shadcn/ui's implementation of the ",(0,o.jsx)(n.code,{children:"DropdownMenu"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/ui/dropdown-menu.tsx\n'use client';\n\nimport * as React from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\n// ...\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\n// ...\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  // ...\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We can see that the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"})," primitive we're using is literally just an alias for Radix-ui's ",(0,o.jsx)(n.code,{children:"Trigger"})," dropdown primitive! So, if we pass ",(0,o.jsx)(n.code,{children:"asChild"})," to the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"})," that's the same thing as passing it to the ",(0,o.jsx)(n.code,{children:"Trigger"}),"! Neat, sounds promising!"]}),"\n",(0,o.jsxs)(n.p,{children:["So, let's pass ",(0,o.jsx)(n.code,{children:"asChild"})," to the ",(0,o.jsx)(n.code,{children:"DropdownMenuTrigger"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ui/dropdown-menu';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex gap-[20px] border border-blue-500 p-2'>\n          <BrowseActionBarButton primary>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n          <BrowseActionBarButton>\n            <>\n              <FiFolderPlus size={24} />\n              Create folder\n            </>\n          </BrowseActionBarButton>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <BrowseActionBarButton primary>\n                <>\n                  <MdUpload size={24} />\n                  Upload\n                </>\n              </BrowseActionBarButton>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem>File</DropdownMenuItem>\n              <DropdownMenuItem>Folder</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(n.p,{children:"& eureka, issues 1 & 2 are solved! Now let's look at issue 3, to change the alignment of the dropdown content."}),"\n",(0,o.jsxs)(n.p,{children:["Turns out, that's actually extremely simple. Radix-ui provides an ",(0,o.jsx)(n.code,{children:"align"})," prop to the ",(0,o.jsx)(n.code,{children:"Content"})," primitive that is set to ",(0,o.jsx)(n.code,{children:"center"})," by default, but is an enum which can also be set to ",(0,o.jsx)(n.code,{children:"start"})," or ",(0,o.jsx)(n.code,{children:"end"}),". & upon looking back at shadcn/ui's ",(0,o.jsx)(n.code,{children:"DropdownMenu"})," implementation, we see as well that the ",(0,o.jsx)(n.code,{children:"DropdownMenuContent"})," primitive is just an alias for the ",(0,o.jsx)(n.code,{children:"Content"})," primitive. So, let's pass ",(0,o.jsx)(n.code,{children:"align='start'"})," to the ",(0,o.jsx)(n.code,{children:"DropdownMenuContent"})," primitive!"]}),"\n",(0,o.jsxs)(n.p,{children:["We'll modify our ",(0,o.jsx)(n.code,{children:"DropdownMenu"})," as such:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <BrowseActionBarButton primary>\n      <>\n        <MdUpload size={24} />\n        Upload\n      </>\n    </BrowseActionBarButton>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent align='start'>\n    <DropdownMenuItem>File</DropdownMenuItem>\n    <DropdownMenuItem>Folder</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["& boom, dropdown content is now aligned to the start of the trigger. Now, we only have problem 4 remaining. & I'm gonna be honest, this feels like it might be an accessibility thing & we might be jerks if we remove the highlighting - so we'll do a little research but we won't press too hard on that. Especially since it doesn't highlight it if we click on literally anything else before or after clicking on the button. But still, worth a look. & since we're proud lazy coders, we will expend a lot of effort do read anything other than the documentation - so you know what that means, it's time to search for key words in the ",(0,o.jsxs)(n.a,{href:"https://github.com/radix-ui/primitives/issues",children:["issues tab of Radix-ui's ",(0,o.jsx)(n.code,{children:"primitives"})," Github repo!"]})]}),"\n",(0,o.jsxs)(n.p,{children:["So, we'll search for the terms 'dropdown focus' & see what comes up. & ooo, this issue seems relevant! ",(0,o.jsx)(n.a,{href:"https://github.com/radix-ui/primitives/issues/2682",children:"Dropdown Menu: Allow disabling autofocus of the Trigger based on the event"})]}),"\n",(0,o.jsx)(n.p,{children:"Now, when reading through a Github issue, you typically read 2 parts. First, you read the start to see if they are having the same you're having."}),"\n",(0,o.jsx)(n.p,{children:"Here's a snippet from the first post:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"Allow disabling the autofocus of the Dropdown Menu Trigger on menu close, based on the event. I want to prevent autofocus of the Trigger in cases the menu is closed by a mouse event, but cannot do that cause the event argument in the onCloseAutoFocus is a CustomEvent which does not points to the original event. Autofocus of the Trigger is great only when the menu is closed by a keyboard event."})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"Examples in other libraries"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"I haven't used similar libraries, but can give you an example of web apps where this behavior is implemented:"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"Gmail & Google top right buttons: avatar & apps. They all get focus when the popup is closed by Esc, but they do not gain focus when the popup is closed by clicking outside."})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"Facebook top right buttons: avatar & notifications."})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"Reddit top right buttons: avatar"})}),"\n",(0,o.jsx)(n.p,{children:"Heck yeah, that sounds like exactly what we're talking about! & even better, it's a resolved issue! Now let's fast-forward to the end & see if there's a solution we can use."}),"\n",(0,o.jsx)(n.p,{children:"The last post has this very interesting text:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"This is true for non-modal layers and our primitives work the same way when modal={false} is passed, ie. if you click outside to dismiss we don't autofocus in this case, and let the natural focus behaviour happen."})}),"\n",(0,o.jsxs)(n.p,{children:["There's a ",(0,o.jsx)(n.code,{children:"modal"})," prop we can set to ",(0,o.jsx)(n.code,{children:"false"}),", eh? Sounds like a keyword to me! Now we can go back to the Radix-ui dropdown-menu documentation & search for the ",(0,o.jsx)(n.code,{children:"modal"})," prop."]}),"\n",(0,o.jsxs)(n.p,{children:["Looks like we have a hit! There's a ",(0,o.jsx)(n.code,{children:"modal"})," prop on the ",(0,o.jsx)(n.code,{children:"Root"})," primitive, which is ",(0,o.jsx)(n.code,{children:"true"})," by default. Looks like it's some kind of accessibility feature... but since we have many examples of dropdown menus that don't autofocus on closing with a mouse & even the Dropbox button we're mocking doesn't autofocus on close, it seems safe to set that prop to false. Let's try it."]}),"\n",(0,o.jsxs)(n.p,{children:["It looks like the ",(0,o.jsx)(n.code,{children:"DropdownMenu"})," primitive is an alias for the ",(0,o.jsx)(n.code,{children:"Root"})," primitive, so we'll set the ",(0,o.jsx)(n.code,{children:"modal"})," prop to ",(0,o.jsx)(n.code,{children:"false"})," there."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DropdownMenu modal={false}>\n  <DropdownMenuTrigger asChild>\n    <BrowseActionBarButton primary>\n      <>\n        <MdUpload size={24} />\n        Upload\n      </>\n    </BrowseActionBarButton>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent align='start'>\n    <DropdownMenuItem>File</DropdownMenuItem>\n    <DropdownMenuItem>Folder</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Eureka, it works perfectly! & it's still completely possible to use with just keyboard input & it even still autofocuses after closing the menu with the ",(0,o.jsx)(n.code,{children:"ESC"})," key. So since it's still pretty keyboard-friendly even with ",(0,o.jsx)(n.code,{children:"modal"})," set to false, what exactly did the ",(0,o.jsx)(n.code,{children:"modal"})," prop specifically do? I have no idea. & for the time being, it seems like we'll not have to care. If Dropbox can do it, so can we."]}),"\n",(0,o.jsx)(n.p,{children:"Now that our dropdown menu works perfectly, let's replace the original button with it so we don't have duplicate 'Upload' buttons."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ui/dropdown-menu';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex gap-[20px] border border-blue-500 p-2'>\n          <DropdownMenu modal={false}>\n            <DropdownMenuTrigger asChild>\n              <BrowseActionBarButton primary>\n                <>\n                  <MdUpload size={24} />\n                  Upload\n                </>\n              </BrowseActionBarButton>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align='start'>\n              <DropdownMenuItem>File</DropdownMenuItem>\n              <DropdownMenuItem>Folder</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          <BrowseActionBarButton>\n            <>\n              <FiFolderPlus size={24} />\n              Create folder\n            </>\n          </BrowseActionBarButton>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Great, it's all looking good! Now the only thing I feel might be important to add is to give each ",(0,o.jsx)(n.code,{children:"DropdownMenuItem"})," an icon, & make the cursor into a pointer on hover. We'll go the same route as before of picking icons from ",(0,o.jsx)(n.code,{children:"react-icons"}),". & with some small styling changes by adding classnames to the ",(0,o.jsx)(n.code,{children:"DropdownMenuItem"})," primitives, we get:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/app/test/page.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\nimport {\n  MdOutlineDriveFolderUpload,\n  MdOutlineUploadFile,\n} from 'react-icons/md';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ui/dropdown-menu';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <div className='flex gap-[20px] border border-blue-500 p-2'>\n          <DropdownMenu modal={false}>\n            <DropdownMenuTrigger asChild>\n              <BrowseActionBarButton primary>\n                <>\n                  <MdUpload size={24} />\n                  Upload\n                </>\n              </BrowseActionBarButton>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align='start'>\n              <DropdownMenuItem className='cursor-pointer gap-2'>\n                <>\n                  <MdOutlineUploadFile size={20} />\n                  File\n                </>\n              </DropdownMenuItem>\n              <DropdownMenuItem className='cursor-pointer gap-2'>\n                <>\n                  <MdOutlineDriveFolderUpload size={20} />\n                  Folder\n                </>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          <BrowseActionBarButton>\n            <>\n              <FiFolderPlus size={24} />\n              Create folder\n            </>\n          </BrowseActionBarButton>\n        </div>\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(n.p,{children:"& it looks gorgeous! & since we don't actually have any more buttons that would be relevant to our feature set, I'd say we're at a point where we can stick with those 2 buttons & move on."}),"\n",(0,o.jsxs)(n.p,{children:["& frankly, I think I'm decently satisfied with our progress so let's promote the whole page from the ",(0,o.jsx)(n.code,{children:"/test"})," route to the ",(0,o.jsx)(n.code,{children:"/"})," route. & with the app router, that's as easy as just dragging & dropping the page.tsx file into ",(0,o.jsx)(n.code,{children:"src/app"})," & overwriting the placeholder page.tsx from our first sanity check! & to finish off the move, we'll delete the old ",(0,o.jsx)(n.code,{children:"src/app/test"})," directory, as we don't need it anymore. Now we find our nice page right where it belongs, at the base url."]}),"\n",(0,o.jsxs)(n.p,{children:["The only thing I'd like to do left before moving on is abstracting the entire browse action bar into one component, then importing that by itself so that the page.tsx file is shorter & there's a better separation of concerns. So, we'll make a new file - ",(0,o.jsx)(n.code,{children:"src/components/browse-action-bar.tsx"}),", & move over all the relevant imports:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/browse-action-bar.tsx\nimport { BrowseActionBarButton } from '@/components/browse-action-bar-button';\nimport { MdUpload } from 'react-icons/md';\nimport { FiFolderPlus } from 'react-icons/fi';\nimport {\n  MdOutlineDriveFolderUpload,\n  MdOutlineUploadFile,\n} from 'react-icons/md';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ui/dropdown-menu';\n\nexport const BrowseActionBar = () => {\n  return (\n    <div className='flex gap-[20px] border border-blue-500 p-2'>\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <BrowseActionBarButton primary>\n            <>\n              <MdUpload size={24} />\n              Upload\n            </>\n          </BrowseActionBarButton>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align='start'>\n          <DropdownMenuItem className='cursor-pointer gap-2'>\n            <>\n              <MdOutlineUploadFile size={20} />\n              File\n            </>\n          </DropdownMenuItem>\n          <DropdownMenuItem className='cursor-pointer gap-2'>\n            <>\n              <MdOutlineDriveFolderUpload size={20} />\n              Folder\n            </>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      <BrowseActionBarButton>\n        <>\n          <FiFolderPlus size={24} />\n          Create folder\n        </>\n      </BrowseActionBarButton>\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Remember, we're using ",(0,o.jsx)(n.code,{children:"rafc"})," to generate a React snippet for a new component with a named export. We're using a named export for no reason other than I personally like working with named exports more. Now let's just import that new abstracted component into our base page.tsx:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { BrowseActionBar } from '@/components/browse-action-bar';\n\nconst Page = () => {\n  return (\n    <div className='flex h-full border-4 border-blue-600'>\n      <div className='w-[240px] border-4'>SIDEBAR</div>\n      <div className='flex-1 flex-col border-4'>\n        <BrowseActionBar />\n        MAIN CONTENT\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Gorgeous. Time to move on & pick the next part to build. Offhand, I feel the next 2 obvious options would be either the main file browser or the ",(0,o.jsx)(n.code,{children:"Folders"})," file browser in the sidebar. & because the main file browser is going to be way harder, I choose the sidebar browser."]}),"\n",(0,o.jsx)(n.p,{children:"Let's go!"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},3231:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/browse-action-bar-773532b0d7176913b01932fbe01c65e8.png"},2709:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/button-within-button-2270856de6efc6fe423849948cb0261a.png"},5805:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/upload-dropdown-67280027858df75e6def354a5904e951.png"},9128:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(9474);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);